■■■ AOP(Aspect Oriented Programming)■■■
2022.11.09

※ 공통의 관심 사항을 적용해서 발생하는 의존 관계의 복잡성과
   코드 중복을 해소해 주는 프로그래밍 기법.
   
   
 ○ AOP 개념
 
  주 업무를 실행할 때 보조적인 업무(주 업무 실행 시간 체크, 로그 기록 등)가
  진행 되어야한다.
  만약, 주 업무가 여러 개이고 각각의 주업무가 수행되는 동안
  동일한 보조 업무가 진행되어야 한다면 보조업무 부분은 중복된 코드가
  될 수 밖에 없다.
  이런 중복 요소를 제거하고, 보조 업무를 보다 독립적인 방법으로
  실행할 수 있도록 구성하는것을  AOP 기법 이라고 한다.
  
○ AOP 관련 주요 용어
-- 주인공은 주 업무가 아니다. 보조 업무가 주인공

	- 보조 업부(cross-cutting concern)┼
	  주 업무 실행시 발생하는 보조적인 업무
	  주 업무와 분리 및 결합이 쉽게 이루어 질 수 있도록 만들어야 한다.
	
	- 주 업무(core concern, primary concern)↓
	  핵심적인 기능을 수행하는 업무.
	  사용자의 요청에 대한 기본적인 수행 및 결과를 반환을 수행해야 한다.
	
	-Advice (업무가 수행되는 시점에 따라서 분리하는 기준)
	  언제 어떤 공통 관심 사항(보조 업부, cross-cutting concern)을
	  적용할 지 결정하는 방법.
	  Before Advice After Advice,Around Advice 등이 있다.
	
	· Before Advice 
		보조 업무가 주 업무 실행 전에 수행 되는 경우
	· After Advice
		보조 업무가 주 업무 실행 후에 수행되는 경우
	· Around Advice
		보조 업무가 주 업무 실행 전과 후에 수행되는 경우
		
	- proxy
	주 업무를 실행하는 객체와 동일한 모양을 가진 가짜 객체.
	사용자가 주 업무를 실행하는 객체를 찾아가는 것이 아니라,
	proxy 를 찾아가도록 지정하게된다.
	proxy 내부에서 보조 업무를 실행한 후 주 업무를 호출하도록 하면
	외부에서 볼 때 (체감 할 때),
	주 업무를 실행하는 것과 같은 결과가 나오도록 처리 할 수 있다.
	
	- joinpoint
	proxy 내부에서 주 업무를 호출하는 경우에
	특정 지정에만 호출되도록 할 수 있다.
	
	- weaving 
	advice 를 주 업무에 적용하는 과정을 부르는 명칭
	
	- aspect
	여러 주 업무 객체에 공통적으로 적용되는 공통 관심 사항(보조 업무)을
	aspect 라고 한다.
	(※ 즉, 보조 업무 == cross-cutting concern == 공통 관심 사항 == aspect)
	
○ AOP 진행 순서

사용자 			 프록시		    보조업무			주업무
(client)		 (proxy)	    (cross-cutting		(core concern)
							    concern)
							 
  ○------------------------------------------------->○	(사용자의 기대)
  
  ●-----①------>●
  
  				  ●------②------->●
  				  
  				  ●----------------③--------------->●
  				  
  				  ●<---------------④----------------●
  				  
  				  ●------⑤------->●
  
  ○<------------------------------------------------ ○
  
  ●<-----⑥------●
   
   				-브로커 : (프록시가 가로챔) 이때 주업무인냥 프록시는 주업무행세를한다.(자식처럼)
  ① 사용자는 proxy 객체에 접근한다.	
  	 사용자 입장에서는 proxy 객체가 주 업무(core concern)객체와 같다고 인지한다.
  	 
  ② proxy 객체 내부에서 보조업무(cross-cutting concern)를 진행한다.
     주 업무가 실행되기 전에 수행되는 보조 업무는
     Before Advice, Around Advice 가 있다.
  
  ③ proxy 객체 내부에서 주 업무를 호출 한다.
  	 이로 인해 주 업무가 진행된다.
  
  ④ 주 업무가 처리한 결과 값을 반환한다.
  
  ⑤ proxy 객체 내부에서 보조 업무(cross-cutting concern)를 진행한다.
     주 업무가 실행된 후에 수행되는 보조 업무는
     After Advide, Around Advice 가 있다.
  
  ⑥ 사용자에게 결과값을 반환한다.
   
   
	
	oop aop 는 별도의 개념 aop가 oop를 지원해준다~!!
	
	
	
	
	
	
	