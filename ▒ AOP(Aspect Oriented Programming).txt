■■■ AOP(Aspect Oriented Programming)■■■
2022.11.09

※ 공통의 관심 사항을 적용해서 발생하는 의존 관계의 복잡성과
   코드 중복을 해소해 주는 프로그래밍 기법.
   
   
 ○ AOP 개념
 
  주 업무를 실행할 때 보조적인 업무(주 업무 실행 시간 체크, 로그 기록 등)가
  진행 되어야한다.
  만약, 주 업무가 여러 개이고 각각의 주업무가 수행되는 동안
  동일한 보조 업무가 진행되어야 한다면 보조업무 부분은 중복된 코드가
  될 수 밖에 없다.
  이런 중복 요소를 제거하고, 보조 업무를 보다 독립적인 방법으로
  실행할 수 있도록 구성하는것을  AOP 기법 이라고 한다.
  
○ AOP 관련 주요 용어
-- 주인공은 주 업무가 아니다. 보조 업무가 주인공

	- 보조 업부(cross-cutting concern)┼
	  주 업무 실행시 발생하는 보조적인 업무
	  주 업무와 분리 및 결합이 쉽게 이루어 질 수 있도록 만들어야 한다.
	
	- 주 업무(core concern, primary concern)↓
	  핵심적인 기능을 수행하는 업무.
	  사용자의 요청에 대한 기본적인 수행 및 결과를 반환을 수행해야 한다.
	
	- Advice (업무가 수행되는 시점에 따라서 분리하는 기준)
	  언제 어떤 공통 관심 사항(보조 업부, cross-cutting concern)을
	  적용할 지 결정하는 방법.
	  Before Advice After Advice,Around Advice 등이 있다.
	
	· Before Advice 
		보조 업무가 주 업무 실행 전에 수행 되는 경우
	· After Advice
		보조 업무가 주 업무 실행 후에 수행되는 경우
	· Around Advice
		보조 업무가 주 업무 실행 전과 후에 수행되는 경우
		
	- proxy
	주 업무를 실행하는 객체와 동일한 모양을 가진 가짜 객체.
	사용자가 주 업무를 실행하는 객체를 찾아가는 것이 아니라,
	proxy 를 찾아가도록 지정하게된다.
	proxy 내부에서 보조 업무를 실행한 후 주 업무를 호출하도록 하면
	외부에서 볼 때 (체감 할 때),
	주 업무를 실행하는 것과 같은 결과가 나오도록 처리 할 수 있다.
	
	- joinpoint
	proxy 내부에서 주 업무를 호출하는 경우에
	특정 지정에만 호출되도록 할 수 있다.
	
	- weaving 
	advice 를 주 업무에 적용하는 과정을 부르는 명칭
	
	- aspect
	여러 주 업무 객체에 공통적으로 적용되는 공통 관심 사항(보조 업무)을
	aspect 라고 한다.
	(※ 즉, 보조 업무 == cross-cutting concern == 공통 관심 사항 == aspect)
	
○ AOP 진행 순서

사용자 			 프록시		    보조업무			주업무
(client)		 (proxy)	    (cross-cutting		(core concern)
							    concern)
							 
  ○------------------------------------------------->○	(사용자의 기대)
  
  ●-----①------>●
  
  				  ●------②------->●
  				  
  				  ●----------------③--------------->●
  				  
  				  ●<---------------④----------------●
  				  
  				  ●------⑤------->●
  
  ○<------------------------------------------------ ○
  
  ●<-----⑥------●
   
   		-브로커 : (프록시가 가로챔) 이때 주업무인냥 프록시는 주업무행세를한다.(자식처럼)
  ① 사용자는 proxy 객체에 접근한다.	
  	 사용자 입장에서는 proxy 객체가 주 업무(core concern)객체와 같다고 인지한다.
  	 
  ② proxy 객체 내부에서 보조업무(cross-cutting concern)를 진행한다.
     주 업무가 실행되기 전에 수행되는 보조 업무는
     Before Advice, Around Advice 가 있다.
  
  ③ proxy 객체 내부에서 주 업무를 호출 한다.
  	 이로 인해 주 업무가 진행된다.
  
  ④ 주 업무가 처리한 결과 값을 반환한다.
  
  ⑤ proxy 객체 내부에서 보조 업무(cross-cutting concern)를 진행한다.
     주 업무가 실행된 후에 수행되는 보조 업무는
     After Advide, Around Advice 가 있다.
  
  ⑥ 사용자에게 결과값을 반환한다.
   
   
	
	oop aop 는 별도의 개념 aop가 oop를 지원해준다~!!
	
------------------------------------------------------------------------------------------

■■■ IoC/DI 실습 01(스프링 프레임워크 없이 IoC/DI 실습) ■■■
2022-11-09
○ 실습 성격 및 주요 사항

  1. 콘솔 프로젝트
  2. 기본적은 산술 연산 처리 → 주 업무 구성
  3.  AOP 기법을 적용하지 않은 상태에서
	보조 업무(처리시간 측정, 로그처리)를 적용시켜보는 실습을 진행한다.
  4. SpringApp05
  5. 로그 자원 및 스톱워치 자원 활용을 위해
     별도로 필요한 jar 파일을 등록하여 실습을 진행한다.

○ 물리적 파일 구성
  1. Calculator.java		→ 인터페이스
  2. CalculatorImpl.java	→ 클래스 
				   주 업무와 보조 업무가 결합되어 있는 형태로 적용
  3. Main.java 			→ 클래스
 			 	   main() 메소드가 포함된 테스트 클래스
	
※ 로그 및 스톱워치 사용을 위한 라이브러리 등록

- 경로1 : C:\s-f-3.0.2-with-docs\spring-framework-3.0.2.RELEASE\dist
	·파일 1 :org.springframework.core-3.0.2.RELEASE.jar
- 경로2 : C:\s-f-3.0.2-dependencies\org.apache.commons
	   \com.springsource.org.apache.commons.logging-1.1.1.jar
	·파일 2 :com.springsource.org.apache.commons.logging-1.1.1.jar
	

----------------------------------------------------------------------------------------------

■■■ AOP 개념 실습 02 (단순히 AOP 기법만 적용) ■■■
2022-11-10
○ 실습 성격 및 주요 사항
   1. 콘솔 프로젝트
   2. 기본적인 산술 연산 처리 → 주 업무 구성
   3. AOP 기법을 사용하여 보조 업무(처리시간측정, 로그처리)를
      적용시켜보는 실습을 진행한다.
   4. SpringApp06
   5. 로그 자원 및 스톱워치 자원 활용을 위해
      별도로 필요한 jar 파일을 등록하여 실습을 진행한다.

○ 물리적 파일 구성
   1. Calculator.java		→ 인터페이스.
				   기존 소스코드 그대로 활용.
   2. CalculatorProxy.java	→ 프록시 클래스.
				   보조 업무 적용 및 주 업무 호출.
   2. CalculatorImpl.java	→ 클래스
				   주 업무 적용. (보조 업무 분리 → 프록시로 이전)
   3. Main.java			→ 클래스
				   main() 메소드가 포함된 테스트 클래스

※ 로그 및 스톱워치 사용 라이브러리 등록
   - 경로1	: C:\s-f-3.0.2-with-docs.zip\dist
     ·파일 1	: org.springframework.core-3.0.2.RELEASE.jar

   - 경로2	: C:\s-f-3.0.2-dependencies.zip\org.apache.commons
		   \com.springsource.org.apache.commons.logging\1.1.1
     ·파일 6	: com.springsource.org.apache.commons.logging-1.1.1.jar

----------------------------------------------------------------------------------------------

■■■ AOP 개념 실습 03 (Spring AOP 기법 적용) ■■■
   
○ 실습 성격 및 주요 사항
   1. 콘솔 프로젝트
   2. 기본적인 산술 연산 처리 → 주 업무 구성
   3. AOP 기법을 사용하여 보조 업무(처리시간측정, 로그처리)를
      적용시켜보는 실습을 진행한다.
   4. SpringApp07
   5. 로그 자원 및 스톱워치 자원 활용을 위해
      별도로 필요한 jar 파일을 등록하여 실습을 진행한다.

○ 물리적 파일 구성
   1. Calculator.java		→ 인터페이스.
				   기존 소스코드 그대로 활용.
   2. CalculatorAspect.java	→ 보조 업무 클래스.
				   보조 업무 적용 및 주 업무 호출
   3. CalculatorImpl.java	→ 클래스
				   주 업무 적용. (보조 업무 분리 → 프록시로 이전)
   4. Main.java			→ 클래스
				   main() 메소드가 포함된 테스트 클래스
   5. config.xml		→ 스프링 환경 설정 파일(문서)
				   객체 생성 및 DI 설정

※ 로그 및 스톱워치 사용 + 스프링 AOP 기법 적용을 위한 라이브러리 등록
   - 경로1	: C:\s-f-3.0.2-with-docs.zip\dist
     ·파일 1	: org.springframework.aop-3.0.2.RELEASE.jar
     ·파일 2	: org.springframework.asm-3.0.2.RELEASE.jar
     ·파일 3	: org.springframework.beans-3.0.2.RELEASE.jar
     ·파일 4	: org.springframework.context-3.0.2.RELEASE.jar
     ·파일 5	: org.springframework.core-3.0.2.RELEASE.jar
     ·파일 6	: org.springframework.expression-3.0.2.RELEASE.jar

   - 경로2	: C:\s-f-3.0.2-dependencies.zip\org.apache.commons
		   \com.springsource.org.apache.commons.logging\1.1.1
     ·파일 7	: com.springsource.org.apache.commons.logging-1.1.1.jar

   - 경로3	: C:\s-f-3.0.2-dependencies\org.aopalliance
		   \com.springsource.org.aopalliance\1.0.0
     ·파일 8	: com.springsource.org.aopalliance-1.0.0.jar


----------------------------------------------------------------------------------------------

■■■ AOP 개념 실습 04 (Spring AOP 기법 적용 - Before Advice 추가) ■■■
   
※ AOP Advice

   ·Advice
     : 언제 어떤 공통 관심 사항(보조 업무, cross-cutting concern)을
       적용할지에 대한 내용을 결정하는 방법.

   ·Before Advice
     : 보조 업무가 주 업무가 실행되기 전에 수행되는 경우.
   
   ·After Advice
     : 보조 업무가 주 업무가 실행된 후에 수행되는 경우

   ·Around Advice
     : 보조 업무가 주 업무가 실행되기 전과 실행된 후에 수행되는 경우.

○ 실습 성격 및 주요 사항
   1. 콘솔 프로젝트
   2. 기본적인 산술 연산 처리 → 주 업무 구성
   3. AOP 기법을 사용하여 보조 업무(처리시간측정, 로그처리)를
      적용시켜보는 실습을 진행한다.
   4. SpringApp08
   5. 로그 자원 및 스톱워치 자원 활용을 위해
      별도로 필요한 jar 파일을 등록하여 실습을 진행한다.
   6. 위의 사항에 추가로 Before Advice 를 적용한다.



○ 물리적 파일 구성
   1. Calculator.java		→ 인터페이스.
				   기존 소스코드 그대로 활용.
   2. CalculatorAspect.java	→ 보조 업무 클래스.
				   보조 업무 적용 및 주 업무 호출
				   기존 소스코드 그대로 활용.
   3. CalculatorImpl.java	→ 클래스
				   주 업무 적용. (보조 업무 분리 → 프록시로 이전)
				   기존 소스코드 그대로 활용.
   4. Main.java			→ 클래스
				   main() 메소드가 포함된 테스트 클래스
				   기존 소스코드 그대로 활용.
   5. config.xml		→ 스프링 환경 설정 파일(문서)
				   객체 생성 및 DI 설정

   +

   6. CalculatorBeforeAdvice.java → 추가. Before Advice.

※ 로그 및 스톱워치 사용 + 스프링 AOP 기법 적용을 위한 라이브러리 등록
   - 경로1	: C:\s-f-3.0.2-with-docs.zip\dist
     ·파일 1	: org.springframework.aop-3.0.2.RELEASE.jar
     ·파일 2	: org.springframework.asm-3.0.2.RELEASE.jar
     ·파일 3	: org.springframework.beans-3.0.2.RELEASE.jar
     ·파일 4	: org.springframework.context-3.0.2.RELEASE.jar
     ·파일 5	: org.springframework.core-3.0.2.RELEASE.jar
     ·파일 6	: org.springframework.expression-3.0.2.RELEASE.jar

   - 경로2	: C:\s-f-3.0.2-dependencies.zip\org.apache.commons
		   \com.springsource.org.apache.commons.logging\1.1.1
     ·파일 7	: com.springsource.org.apache.commons.logging-1.1.1.jar

   - 경로3	: C:\s-f-3.0.2-dependencies\org.aopalliance
		   \com.springsource.org.aopalliance\1.0.0
     ·파일 8	: com.springsource.org.aopalliance-1.0.0.jar


----------------------------------------------------------------------------------------------

■■■ AOP 개념 실습 05 (Spring AOP 기법 적용 - After Throwing Advice 추가) ■■■
   
※ AOP Advice

   ·Advice
     : 언제 어떤 공통 관심 사항(보조 업무, cross-cutting concern)을
       적용할지에 대한 내용을 결정하는 방법.
   ·Before Advice
     : 보조 업무가 주 업무가 실행되기 전에 수행되는 경우.
   ·After Advice
     : 보조 업무가 주 업무가 실행된 후에 수행되는 경우.
   ·Around Advice
     : 보조 업무가 주 업무가 실행되기 전과 실행된 후에 수행되는 경우.
   ·After Throwing Advice
     : 주 업무 실행 과정에서 예외가 발생하였을 때 보조 업무가 수행되는 경우.
   ·joinpoint
     : Advice 가 적용되는 지점.
   ·pointcut
     : joinpoint 를 좀 더 세부적으로 적용하기 위해서 joinpoint 를 잘라내는 개념.
   ·weaving
     : 주 업무에 보조 업무를 결합시키는 행위 (또는 그 과정)

※ Spring AOP 에서는 메소드 단위까지만 pointcut 을 지원한다.


○ 실습 성격 및 주요 사항
   1. 콘솔 프로젝트
   2. 기본적인 산술 연산 처리 → 주 업무 구성
   3. AOP 기법을 사용하여 보조 업무(처리시간측정, 로그처리)를
      적용시켜보는 실습을 진행한다.
   4. SpringApp09
   5. 로그 자원 및 스톱워치 자원 활용을 위해
      별도로 필요한 jar 파일을 등록하여 실습을 진행한다.
   6. 위의 사항에 추가로 Before Advice 를 적용한다.
   7. 위의 사항에 추가로 After Throwing Advice 를 적용한다.



○ 물리적 파일 구성
   1. Calculator.java		→ 인터페이스.
				   기존 소스코드 그대로 활용.
   2. CalculatorAspect.java	→ 보조 업무 클래스.
				   보조 업무 적용 및 주 업무 호출
				   기존 소스코드 그대로 활용.
   3. CalculatorImpl.java	→ 클래스
				   주 업무 적용. (보조 업무 분리 → 프록시로 이전)
				   기존 소스코드 그대로 활용.
   4. Main.java			→ 클래스
				   main() 메소드가 포함된 테스트 클래스
				   기존 소스코드 그대로 활용.
   5. config.xml		→ 스프링 환경 설정 파일(문서)
				   객체 생성 및 DI 설정

   +

   6. CalculatorBeforeAdvice.java → 추가. Before Advice.
					   주 업무 수행 전에 실행되어야 할 보조 업무 클래스.

   +

   7. CalculatorAfterThrowing.java → 추가. After Throwing Advice.

※ 로그 및 스톱워치 사용 + 스프링 AOP 기법 적용을 위한 라이브러리 등록
   - 경로1	: C:\s-f-3.0.2-with-docs.zip\dist
     ·파일 1	: org.springframework.aop-3.0.2.RELEASE.jar
     ·파일 2	: org.springframework.asm-3.0.2.RELEASE.jar
     ·파일 3	: org.springframework.beans-3.0.2.RELEASE.jar
     ·파일 4	: org.springframework.context-3.0.2.RELEASE.jar
     ·파일 5	: org.springframework.core-3.0.2.RELEASE.jar
     ·파일 6	: org.springframework.expression-3.0.2.RELEASE.jar

   - 경로2	: C:\s-f-3.0.2-dependencies.zip\org.apache.commons
		   \com.springsource.org.apache.commons.logging\1.1.1
     ·파일 7	: com.springsource.org.apache.commons.logging-1.1.1.jar

   - 경로3	: C:\s-f-3.0.2-dependencies\org.aopalliance
		   \com.springsource.org.aopalliance\1.0.0
     ·파일 8	: com.springsource.org.aopalliance-1.0.0.jar

	